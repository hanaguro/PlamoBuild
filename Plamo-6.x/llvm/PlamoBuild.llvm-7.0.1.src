#!/bin/sh
##############################################################
pkgbase='llvm'
vers='7.0.1'
url="http://releases.${pkgbase}.org/${vers}/${pkgbase}-${vers}.src.tar.xz
http://releases.llvm.org/${vers}/cfe-${vers}.src.tar.xz
http://releases.llvm.org/${vers}/compiler-rt-${vers}.src.tar.xz"
arch=`uname -m`
build=T1
src="${pkgbase}-${vers}.src"
OPT_CONFIG=''
DOCS='CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT LLVMBuild.txt README.txt RELEASE_TESTERS.TXT'
patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
# 
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi

B=`pwd`/build
if [ $opt_config -eq 1 ] ; then
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
    cd $S


    tar -xf $W/cfe-${vers}.src.tar.xz -C tools
    tar -xf $W/compiler-rt-${vers}.src.tar.xz -C projects
    mv tools/cfe-${vers}.src tools/clang
    mv projects/compiler-rt-${vers}.src projects/compiler-rt
    
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done

    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    CC=gcc CXX=g++
    cmake -DCMAKE_INSTALL_PREFIX=/usr           \
          -DLLVM_ENABLE_FFI=ON                  \
	  -DCMAKE_BUILD_TYPE=Release            \
	  -DLLVM_BUILD_LLVM_DYLIB=ON            \
	  -DLLVM_LINK_LLVM_DYLIB=ON             \
	  -DLLVM_TARGETS_TO_BUILD="host;AMDGPU" \
	  -DLLVM_LIBDIR_SUFFIX=64 \
	  -Wno-dev $S

    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
fi
    
if [ $opt_build -eq 1 ] ; then
    cd $B
    export LDFLAGS='-Wl,--as-needed'
    make -j4
    if [ $? != 0 ]; then
	echo "build error. $0 script stop"
	exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  cp $W/$0 .
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
