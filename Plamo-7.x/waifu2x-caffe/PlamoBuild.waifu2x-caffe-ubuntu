#!/bin/sh
##############################################################
pkgbase="waifu2x_caffe_ubuntu"
vers=$(date +%Y%m%d)
url="https://github.com/nagadomi/waifu2x-caffe-ubuntu.git"
url2="https://github.com/Qengineering/caffe.git"
verify=""
digest=""
arch=`uname -m`
build=B1
src="waifu2x-caffe-ubuntu"
OPT_CONFIG="-DCMAKE_BUILD_TYPE=Release -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN='50 52 60 61 75' -DCUDA_ARCH_PTX='75' -DCUDNN_INCLUDE=/usr/include -DPYTHON_EXECUTABLE=/usr/bin/python3.9 -DPYTHON_INCLUDE_DIR=/usr/include/python3.9 -DPYTHON_LIBRARY=/usr/lib/libpython3.9.so"
DOCS="INSTALL-linux.md LICENSE README.md"
#patchfiles="Cuda.cmake.diff"
patchfiles2="caffe.patch caffe-Cuda.cmake.diff"
#patchfiles2="6693.diff cmake-fix-python-module-installdir cmake-link-correct-python-lib.patch cmake-using-basic-blas fix-more-float-comparison-precision-issue2 pyrequire-no-leveldb.patch"
# specifies files that are not in source archive and patchfiles
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh
export EXTRA_NVCCFLAGS="-Xcompiler -std=c++98"

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi

if [ $opt_download -eq 1 ] ; then
    download_sources
    cd $W
    git clone $url2
    cd $S
    git checkout ubuntu
    ln -sf $W/caffe caffe
    ln -sf $W/caffe libcaffe
    cd $W
fi


if [ $opt_config -eq 1 ] ; then
######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done

    cd $W/caffe
    for patch in $patchfiles2 ; do
        if [ ! -f .${patch}-caffe ]; then
            patch -p1 < $W/$patch
            touch .${patch}-caffe
        fi
    done
    
    sed -i 's/#include <stb_image.h>/#include <stb\/stb_image.h>/' $S/common/stImage.cpp
    sed -i 's/#include <stb_image_write.h>/#include <stb\/stb_image_write.h>/' $S/common/stImage.cpp

    cd $W/caffe
    cmake -G Ninja $OPT_CONFIG .
    ninja -j16

    if [ $? != 0 ]; then
        echo "caffe build error. $0 script stop"
        exit 255
    fi


    cd $W
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-L/usr/lib -Wl,--as-needed' 
    cmake -G Ninja -DCMAKE_INSTALL_PREFIX:PATH=/usr ${OPT_CONFIG} $S
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    ninja -j16
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root

  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  DESTDIR=$P ninja install

  install -D -m 0755 $B/waifu2x-caffe $P/usr/bin/waifu2x-caffe

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
