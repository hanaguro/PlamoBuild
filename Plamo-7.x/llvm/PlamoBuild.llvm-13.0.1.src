#!/bin/sh
##############################################################
pkgbase='llvm'
vers='13.0.1'
url="https://github.com/llvm/llvm-project/releases/download/llvmorg-${vers}/llvm-${vers}.src.tar.xz"
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}.src"
# url2="https://github.com/llvm/llvm-project/releases/download/llvmorg-${vers}/clang-${vers}.src.tar.xz"
# url3="https://github.com/llvm/llvm-project/releases/download/llvmorg-${vers}/compiler-rt-${vers}.src.tar.xz"
# url4="https://github.com/llvm/llvm-project/releases/download/llvmorg-${vers}/lld-${vers}.src.tar.xz"

OPT_CONFIG="
    -DCMAKE_BUILD_TYPE=Release 
    -DCMAKE_INSTALL_PREFIX=/usr
    -DLLVM_BUILD_LLVM_DYLIB=ON 
    -DLLVM_LINK_LLVM_DYLIB=ON 
    -DLLVM_INSTALL_UTILS=ON 
    -DLLVM_ENABLE_RTTI=ON 
    -DLLVM_ENABLE_FFI=ON 
    -DLLVM_BUILD_TESTS=ON
    -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
    -DLLVM_BINUTILS_INCDIR=/usr/include
    -Wnodev
    "
DOCS='CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT README.txt RELEASE_TESTERS.TXT docs'
# don-t-accept-nullptr-as-GEP-element-type.patch 
patchfiles='no-strict-aliasing-DwarfCompileUnit.patch
disable-bswap-for-spir.patch'
oldlib='libLLVM-12.so'
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
# 
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources

    for i in clang compiler-rt lld clang-tools-extra libunwind libcxx libcxxabi ; do
	if [ ! -f ${i}-${vers}.src.tar.xz ] ; then
	    wget https://github.com/llvm/llvm-project/releases/download/llvmorg-${vers}/${i}-${vers}.src.tar.xz
	fi
	# tar xvf ${i}-${vers}.src.tar.xz
    done

fi

# B=`pwd`/build
if [ $opt_config -eq 1 ] ; then
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################

    cd $S
    tar -xf $W/clang-${vers}.src.tar.xz -C tools
    tar -xf $W/lld-${vers}.src.tar.xz -C tools
    tar -xf $W/compiler-rt-${vers}.src.tar.xz -C projects
    tar -xf $W/clang-tools-extra-${vers}.src.tar.xz -C tools
    tar -xf $W/libunwind-${vers}.src.tar.xz -C tools
    tar -xf $W/libcxx-${vers}.src.tar.xz -C tools
    tar -xf $W/libcxxabi-${vers}.src.tar.xz -C tools
    mv tools/clang-${vers}.src tools/clang
    mv tools/lld-${vers}.src tools/lld
    mv projects/compiler-rt-${vers}.src projects/compiler-rt
    mv tools/clang-tools-extra-${vers}.src tools/clang/tools/extra
    mv tools/libunwind-${vers}.src projects/libunwind
    mv tools/libcxx-${vers}.src projects/libcxx
    mv tools/libcxxabi-${vers}.src projects/libcxxabi
	
	ln -sf $S/projects/libunwind $W/libunwind
    
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p2 < $W/$patch
            touch .${patch}
        fi
    done

    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    CC=gcc CXX=g++                              \
    cmake -G Ninja ${OPT_CONFIG} $S
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
fi
    
if [ $opt_build -eq 1 ] ; then
    cd $B
    export LDFLAGS='-Wl,--as-needed'
    ninja -j16
    if [ $? != 0 ]; then
	echo "build error. $0 script stop"
	exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  DESTDIR=$P ninja install
  for i in $oldlib ; do
      cp -a $W/$i $P/usr/lib
      # link libLLVM-12.so to libLLVM-12.0.0.so
      ( cd $P/usr/lib ; ln -sf $i ${i/so/0.0.so} )
  done

  mv $P/usr/include/llvm/Config/llvm-config{,-64}.h 
  cat <<"EOF" > $P/usr/include/llvm/Config/llvm-config.h
#include <bits/wordsize.h>

#if __WORDSIZE == 32
#include "llvm-config-32.h"
#elif __WORDSIZE == 64
#include "llvm-config-64.h"
#else
#error "Unknown word size"
#endif

EOF

  pushd $S/utils/lit
  python setup.py install --root=$P -O1

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
