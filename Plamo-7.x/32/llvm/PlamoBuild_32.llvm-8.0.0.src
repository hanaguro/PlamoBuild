#!/bin/sh
##############################################################
pkgbase='llvm'
vers='8.0.0'
url="http://releases.${pkgbase}.org/${vers}/${pkgbase}-${vers}.src.tar.xz"
arch=`uname -m`
build=M3
src="${pkgbase}-${vers}.src"
src2="http://releases.llvm.org/${vers}/cfe-${vers}.src.tar.xz"
src3="http://releases.llvm.org/${vers}/compiler-rt-${vers}.src.tar.xz"
src4="http://releases.llvm.org/${vers}/lld-${vers}.src.tar.xz"
OPT_CONFIG="-DLLVM_LIBDIR_SUFFIX=32 -DLLVM_TOOLS_INSTALL_DIR=bin32"
DOCS='CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT LLVMBuild.txt README.txt RELEASE_TESTERS.TXT'
patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh
B=$PWD/build
export CC='gcc -m32'
export CXX='g++ -m32'
libdir='lib32'

# このスクリプトで使う1文字変数の意味
# 
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi

B=`pwd`/build
if [ $opt_config -eq 1 ] ; then
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################

    cd $W
    tar xvf lld-${vers}.src.tar.xz
    ln -sf lld-${vers}.src lld
    
    cd $S
    tar -xf $W/cfe-${vers}.src.tar.xz -C tools
    tar -xf $W/compiler-rt-${vers}.src.tar.xz -C projects
    mv tools/cfe-${vers}.src tools/clang
    mv projects/compiler-rt-${vers}.src projects/compiler-rt
    
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
	
	sed 's/include"/include32"/g' -i $S/tools/llvm-config/llvm-config.cpp

    cd $B
    export PKG_CONFIG_LIBDIR=/usr/lib32/pkgconfig PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share32/pkgconfig:/opt/kde/${libdir}/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    cmake -DCMAKE_INSTALL_PREFIX=/usr           \
          -DLLVM_ENABLE_FFI=ON                  \
	  -DCMAKE_BUILD_TYPE=Release            \
	  -DLLVM_BUILD_LLVM_DYLIB=ON            \
	  -DLLVM_LINK_LLVM_DYLIB=ON             \
	  -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
	  -DLLVM_BUILD_TESTS=ON                  \
	  -DLLVM_ENABLE_RTTI=ON  \
	  -DLLVM_ENABLE_PROJECTS=lld \
	  -DCMAKE_INSTALL_BINDIR=bin32 \
	  -DCMAKE_INSTALL_SBINDIR=sbin32 \
	  -DCMAKE_INSTALL_LIBDIR=lib32 \
	  -DCMAKE_INSTALL_INCLUDEDIR=include32 \
	  -DCMAKE_INSTALL_DATAROOTDIR=share32 \
	  -DCMAKE_INSTALL_SYSCONFDIR=etc32 \
	  -DCMAKE_INSTALL_LIBEXECDIR=libexec32 \
	  ${OPT_CONFIG} \
	  -Wno-dev -G Ninja $S

    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
fi
    
if [ $opt_build -eq 1 ] ; then
    cd $B
    export LDFLAGS='-Wl,--as-needed'
    ninja
    if [ $? != 0 ]; then
	echo "build error. $0 script stop"
	exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  DESTDIR=$P ninja install 

  mv $P/usr/include $P/usr/include32
  mv $P/usr/libexec $P/usr/libexec32
  mv $P/usr/share/* $P/usr/share32/
  rmdir $P/usr/share
  mv $P/usr/bin/* $P/usr/bin32/
  rmdir $P/usr/bin

  sed 's/set(LLVM_INCLUDE_DIRS "\${LLVM_INSTALL_PREFIX}\/include")/set(LLVM_INCLUDE_DIRS "\${LLVM_INSTALL_PREFIX}\/include32")/' -i $P/usr/lib32/cmake/llvm/LLVMConfig.cmake
  sed 's/set(LLVM_INCLUDE_DIR "\${LLVM_INSTALL_PREFIX}\/include")/set(LLVM_INCLUDE_DIR "\${LLVM_INSTALL_PREFIX}\/include32")/' -i $P/usr/lib32/cmake/llvm/LLVMConfig.cmake
  sed 's/set(CLANG_INCLUDE_DIRS "\${CLANG_INSTALL_PREFIX}\/include")/set(CLANG_INCLUDE_DIRS "\${CLANG_INSTALL_PREFIX}\/include32")/' -i $P/usr/lib32/cmake/clang/ClangConfig.cmake

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
#  /sbin/makepkg ../$pkg.$compress <<EOF
  /sbin/makepkg ../${pkgbase}_32-$vers-$arch-$build.$compress <<EOF
y
1
EOF

fi
