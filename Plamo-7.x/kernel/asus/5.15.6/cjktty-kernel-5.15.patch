diff -uprN linux-5.15/drivers/tty/vt/selection.c linux-5.15-patched/drivers/tty/vt/selection.c
--- linux-5.15/drivers/tty/vt/selection.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/tty/vt/selection.c	2021-11-09 20:06:38.778385850 +0900
@@ -220,6 +220,8 @@ static int vc_selection_store_chars(stru
 			}
 			obp = bp;
 		}
+		if (c > 0x80)
+			i += 2;
 	}
 	vc_sel.buf_len = bp - vc_sel.buffer;
 
diff -uprN linux-5.15/drivers/tty/vt/vt.c linux-5.15-patched/drivers/tty/vt/vt.c
--- linux-5.15/drivers/tty/vt/vt.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/tty/vt/vt.c	2021-11-09 20:06:38.780385816 +0900
@@ -297,6 +297,19 @@ static inline unsigned short *screenpos(
 	return p;
 }
 
+static inline unsigned short *screenpos_utf8(struct vc_data *vc, int offset, int viewed)
+{
+	unsigned short *p;
+	
+	if (!viewed)
+		p = (unsigned short *)(vc->vc_origin + offset + vc->vc_screenbuf_size);
+	else if (!vc->vc_sw->con_screen_pos)
+		p = (unsigned short *)(vc->vc_visible_origin + offset + vc->vc_screenbuf_size);
+	else
+		p = vc->vc_sw->con_screen_pos(vc, -offset - 1);
+	return p;
+}
+
 /* Called  from the keyboard irq path.. */
 static inline void scrolldelta(int lines)
 {
@@ -639,6 +652,11 @@ static void con_scroll(struct vc_data *v
 	}
 	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
 	scr_memsetw(clear, vc->vc_video_erase_char, vc->vc_size_row * nr);
+
+	d += (vc->vc_screenbuf_size >> 1);
+	s += (vc->vc_screenbuf_size >> 1);
+	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
+	scr_memsetw(d + (b - t - nr) * vc->vc_cols, 0, vc->vc_size_row * nr);
 }
 
 static void do_update_region(struct vc_data *vc, unsigned long start, int count)
@@ -807,6 +825,8 @@ void complement_pos(struct vc_data *vc,
 	static int old_offset = -1;
 	static unsigned short old;
 	static unsigned short oldx, oldy;
+	static unsigned short *p_ext = NULL;
+	static unsigned short old_ext = 0;
 
 	WARN_CONSOLE_UNLOCKED();
 
@@ -814,7 +834,7 @@ void complement_pos(struct vc_data *vc,
 	    old_offset < vc->vc_screenbuf_size) {
 		scr_writew(old, screenpos(vc, old_offset, true));
 		if (con_should_update(vc))
-			vc->vc_sw->con_putc(vc, old, oldy, oldx);
+			vc->vc_sw->con_putc(vc, (old_ext << 16)|old, oldy, oldx);
 		notify_update(vc);
 	}
 
@@ -825,13 +845,17 @@ void complement_pos(struct vc_data *vc,
 		unsigned short new;
 		unsigned short *p;
 		p = screenpos(vc, offset, true);
+		p_ext = screenpos_utf8(vc, offset, true);
 		old = scr_readw(p);
+		old_ext = scr_readw(p_ext);
+
 		new = old ^ vc->vc_complement_mask;
 		scr_writew(new, p);
 		if (con_should_update(vc)) {
 			oldx = (offset >> 1) % vc->vc_cols;
 			oldy = (offset >> 1) / vc->vc_cols;
-			vc->vc_sw->con_putc(vc, new, oldy, oldx);
+			vc->vc_sw->con_putc(vc, (old_ext << 16)|new, oldy, oldx);
+			
 		}
 		notify_update(vc);
 	}
@@ -1144,7 +1168,7 @@ int vc_allocate(unsigned int currcons)	/
 	    vc->vc_screenbuf_size > KMALLOC_MAX_SIZE || !vc->vc_screenbuf_size)
 		goto err_free;
 	err = -ENOMEM;
-	vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_KERNEL);
+	vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size * 2, GFP_KERNEL);
 	if (!vc->vc_screenbuf)
 		goto err_free;
 
@@ -1198,6 +1222,7 @@ static int vc_do_resize(struct tty_struc
 	unsigned long old_origin, new_origin, new_scr_end, rlth, rrem, err = 0;
 	unsigned long end;
 	unsigned int old_rows, old_row_size, first_copied_row;
+	unsigned int old_screen_size;
 	unsigned int new_cols, new_rows, new_row_size, new_screen_size;
 	unsigned int user;
 	unsigned short *oldscreen, *newscreen;
@@ -1241,7 +1266,7 @@ static int vc_do_resize(struct tty_struc
 
 	if (new_screen_size > KMALLOC_MAX_SIZE || !new_screen_size)
 		return -EINVAL;
-	newscreen = kzalloc(new_screen_size, GFP_USER);
+	newscreen = kzalloc(new_screen_size * 2, GFP_USER);
 	if (!newscreen)
 		return -ENOMEM;
 
@@ -1258,6 +1283,7 @@ static int vc_do_resize(struct tty_struc
 
 	old_rows = vc->vc_rows;
 	old_row_size = vc->vc_size_row;
+	old_screen_size = old_rows * old_row_size;
 
 	err = resize_screen(vc, new_cols, new_rows, user);
 	if (err) {
@@ -1306,15 +1332,23 @@ static int vc_do_resize(struct tty_struc
 	while (old_origin < end) {
 		scr_memcpyw((unsigned short *) new_origin,
 			    (unsigned short *) old_origin, rlth);
-		if (rrem)
+		scr_memcpyw((unsigned short *) new_origin + (new_screen_size >> 1),
+			    (unsigned short *) old_origin + (old_screen_size >> 1), rlth);
+		if (rrem) {
 			scr_memsetw((void *)(new_origin + rlth),
 				    vc->vc_video_erase_char, rrem);
+			scr_memsetw((void *)(new_origin + rlth + (new_screen_size)),
+				    vc->vc_video_erase_char, rrem);
+		}
 		old_origin += old_row_size;
 		new_origin += new_row_size;
 	}
-	if (new_scr_end > new_origin)
+	if (new_scr_end > new_origin) {
 		scr_memsetw((void *)new_origin, vc->vc_video_erase_char,
 			    new_scr_end - new_origin);
+		scr_memsetw((void *)new_origin + (new_screen_size), vc->vc_video_erase_char,
+			    new_scr_end - new_origin);
+	}
 	oldscreen = vc->vc_screenbuf;
 	vc->vc_screenbuf = newscreen;
 	vc->vc_screenbuf_size = new_screen_size;
@@ -2854,12 +2888,16 @@ static int vc_con_write_normal(struct vc
 			insert_char(vc, 1);
 		vc_uniscr_putc(vc, next_c);
 
+		if (is_double_width(c) && (width == 2 || width == 1)) {
+			tc = (width == 2) ? 0xFF : 0xFE;
+		}
 		if (himask)
 			tc = ((tc & 0x100) ? himask : 0) |
 			      (tc &  0xff);
 		tc |= (vc_attr << 8) & ~himask;
 
 		scr_writew(tc, (u16 *)vc->vc_pos);
+		scr_writew(c, (u16 *)vc->vc_pos + (vc->vc_screenbuf_size >> 1));
 
 		if (con_should_update(vc) && draw->x < 0) {
 			draw->x = vc->state.x;
@@ -2881,11 +2919,12 @@ static int vc_con_write_normal(struct vc
 		if (tc < 0)
 			tc = ' ';
 		next_c = ' ';
-	}
-	notify_write(vc, c);
 
-	if (inverse)
-		con_flush(vc, draw);
+		notify_write(vc, c);
+
+		if (inverse)
+			con_flush(vc, draw);
+	}
 
 	return 0;
 }
@@ -2926,6 +2965,8 @@ static int do_con_write(struct tty_struc
 	if (con_is_fg(vc))
 		hide_cursor(vc);
 
+	vc->vc_utf = 1;
+	vc->vc_disp_ctrl = 0;
 	param.vc = vc;
 
 	while (!tty->flow.stopped && count) {
@@ -3523,7 +3564,7 @@ static int __init con_init(void)
 		tty_port_init(&vc->port);
 		visual_init(vc, currcons, 1);
 		/* Assuming vc->vc_{cols,rows,screenbuf_size} are sane here. */
-		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_NOWAIT);
+		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size * 2, GFP_NOWAIT);
 		vc_init(vc, vc->vc_rows, vc->vc_cols,
 			currcons || !vc->vc_sw->con_save_screen);
 	}
@@ -4705,6 +4746,11 @@ static int con_font_default(struct vc_da
 
 int con_font_op(struct vc_data *vc, struct console_font_op *op)
 {
+	/* IF WE ENABLE CJK font, I won't let you guys set console font any way until
+	   we found a way to set console font that is unicode capable
+	 */
+	if(vc->vc_font.charcount > op->charcount)
+		return 0;
 	switch (op->op) {
 	case KD_FONT_OP_SET:
 		return con_font_set(vc, op);
@@ -4729,9 +4775,14 @@ u16 screen_glyph(const struct vc_data *v
 	u16 w = scr_readw(screenpos(vc, offset, true));
 	u16 c = w & 0xff;
 
-	if (w & vc->vc_hi_font_mask)
-		c |= 0x100;
-	return c;
+	u16 c_utf8 = scr_readw(screenpos_utf8(vc, offset, 1));
+	if ((c == 0xff || c == 0xfe) && c_utf8 != 0) {
+		return c_utf8;
+	} else {
+		if (w & vc->vc_hi_font_mask)
+			c |= 0x100;
+		return c;
+	}
 }
 EXPORT_SYMBOL_GPL(screen_glyph);
 
diff -uprN linux-5.15/drivers/video/console/Kconfig linux-5.15-patched/drivers/video/console/Kconfig
--- linux-5.15/drivers/video/console/Kconfig	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/console/Kconfig	2021-11-09 20:06:38.842384761 +0900
@@ -97,6 +97,7 @@ config FRAMEBUFFER_CONSOLE_DETECT_PRIMAR
 config FRAMEBUFFER_CONSOLE_ROTATION
        bool "Framebuffer Console Rotation"
        depends on FRAMEBUFFER_CONSOLE
+       depends on !FONT_16x16_CJK
        help
 	 Enable display rotation for the framebuffer console.  This is done
 	 in software and may be significantly slower than a normally oriented
diff -uprN linux-5.15/drivers/video/fbdev/core/bitblit.c linux-5.15-patched/drivers/video/fbdev/core/bitblit.c
--- linux-5.15/drivers/video/fbdev/core/bitblit.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/bitblit.c	2021-11-09 20:06:38.911383586 +0900
@@ -10,6 +10,7 @@
  *  more details.
  */
 
+#include <linux/font.h>
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/string.h>
@@ -43,6 +44,19 @@ static void update_attr(u8 *dst, u8 *src
 	}
 }
 
+static inline u16 utf8_pos(struct vc_data *vc, const unsigned short *utf8)
+{
+	unsigned long p = (long)utf8;
+	if (p >= vc->vc_origin && p < vc->vc_scr_end) {
+		return scr_readw((unsigned short *)(p + vc->vc_screenbuf_size));
+	} else {
+		u16 extra_c;
+		int c = *(int*)utf8;
+		extra_c = (c >> 16 ) & 0x0000ffff;
+		return extra_c;
+	}
+}
+
 static void bit_bmove(struct vc_data *vc, struct fb_info *info, int sy,
 		      int sx, int dy, int dx, int height, int width)
 {
@@ -74,6 +88,34 @@ static void bit_clear(struct vc_data *vc
 	info->fbops->fb_fillrect(info, &region);
 }
 
+u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+					u16 charmask)
+{
+	u32	utf8_c;
+	
+	u8 *src = vc->vc_font.data + (scr_readw(s)&
+				  charmask)*cellsize;
+	
+	utf8_c = utf8_pos(vc, s);
+	
+	if( utf8_c <= vc->vc_font.charcount)
+	{
+		/*
+		 * decide left-half char or right-half char.
+		 * Since non-English chars may double weight
+		 */
+		switch (scr_readw(s) & charmask) {
+			case 0xff:
+				src = vc->vc_font.data + (utf8_c * cellsize *2 );
+				break;
+			case 0xfe:
+				src = vc->vc_font.data + (utf8_c * cellsize *2 + cellsize);
+				break;
+		}
+	}
+	return src;
+}
+
 static inline void bit_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 				     const u16 *s, u32 attr, u32 cnt,
 				     u32 d_pitch, u32 s_pitch, u32 cellsize,
@@ -84,8 +126,7 @@ static inline void bit_putcs_aligned(str
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
+		src = font_bits(vc, s++, cellsize, charmask);
 
 		if (attr) {
 			update_attr(buf, src, attr, vc);
@@ -119,8 +160,7 @@ static inline void bit_putcs_unaligned(s
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
+		src = font_bits(vc, s++, cellsize, charmask);
 
 		if (attr) {
 			update_attr(buf, src, attr, vc);
@@ -245,11 +285,13 @@ static void bit_cursor(struct vc_data *v
 	int err = 1;
 	char *src;
 
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
+
 	cursor.set = 0;
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = vc->vc_font.data + ((c & charmask) * (w * vc->vc_font.height));
+	src = font_bits(vc, (u16*)vc->vc_pos, cellsize, charmask);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -uprN linux-5.15/drivers/video/fbdev/core/fbcon.c linux-5.15-patched/drivers/video/fbdev/core/fbcon.c
--- linux-5.15/drivers/video/fbdev/core/fbcon.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/fbcon.c	2021-11-09 20:06:38.913383552 +0900
@@ -1300,10 +1300,7 @@ static void fbcon_putcs(struct vc_data *
 
 static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
 {
-	unsigned short chr;
-
-	scr_writew(c, &chr);
-	fbcon_putcs(vc, &chr, 1, ypos, xpos);
+	fbcon_putcs(vc, (unsigned short *)&c, 1, ypos, xpos);
 }
 
 static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
@@ -1608,6 +1605,7 @@ static void fbcon_redraw_blit(struct vc_
 			}
 
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -1630,6 +1628,7 @@ static void fbcon_redraw_blit(struct vc_
 static void fbcon_redraw(struct vc_data *vc, struct fbcon_display *p,
 			 int line, int count, int offset)
 {
+	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
 	unsigned short *d = (unsigned short *)
 	    (vc->vc_origin + vc->vc_size_row * line);
 	unsigned short *s = d + offset;
@@ -1652,18 +1651,24 @@ static void fbcon_redraw(struct vc_data
 					start = s;
 				}
 			}
-			if (c == scr_readw(d)) {
-				if (s > start) {
-					fbcon_putcs(vc, start, s - start,
-						     line, x);
-					x += s - start + 1;
-					start = s + 1;
-				} else {
-					x++;
-					start++;
+			if (((scr_readw(s) & charmask) == 0xff ||
+				(scr_readw(s) & charmask) == 0xfe) &&
+				scr_readw(s + (vc->vc_screenbuf_size >> 1)) != 0) {
+			} else {
+				if (c == scr_readw(d)) {
+					if (s > start) {
+						fbcon_putcs(vc, start, s - start,
+							     line, x);
+						x += s - start + 1;
+						start = s + 1;
+					} else {
+						x++;
+						start++;
+					}
 				}
 			}
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -2248,7 +2253,6 @@ static int fbcon_get_font(struct vc_data
 
 	font->width = vc->vc_font.width;
 	font->height = vc->vc_font.height;
-	font->charcount = vc->vc_hi_font_mask ? 512 : 256;
 	if (!font->data)
 		return 0;
 
diff -uprN linux-5.15/drivers/video/fbdev/core/fbcon.h linux-5.15-patched/drivers/video/fbdev/core/fbcon.h
--- linux-5.15/drivers/video/fbdev/core/fbcon.h	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/fbcon.h	2021-11-09 20:06:38.913383552 +0900
@@ -255,4 +255,10 @@ extern void fbcon_set_rotate(struct fbco
 #define fbcon_set_rotate(x) do {} while(0)
 #endif /* CONFIG_FRAMEBUFFER_CONSOLE_ROTATION */
 
+#ifdef CONFIG_DMI
+int fbcon_platform_get_rotate(struct fb_info *info);
+#else
+#define fbcon_platform_get_rotate(i) FB_ROTATE_UR
+#endif /* CONFIG_DMI */
+
 #endif /* _VIDEO_FBCON_H */
diff -uprN linux-5.15/drivers/video/fbdev/core/fbcon_ccw.c linux-5.15-patched/drivers/video/fbdev/core/fbcon_ccw.c
--- linux-5.15/drivers/video/fbdev/core/fbcon_ccw.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/fbcon_ccw.c	2021-11-09 20:06:38.914383534 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 270 degrees
  */
@@ -106,12 +108,22 @@ static inline void ccw_putcs_aligned(str
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
 
+		if (((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe)) {
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ccw(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		} else {
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ccw_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -230,6 +242,7 @@ static void ccw_cursor(struct vc_data *v
 	int err = 1, dx, dy;
 	char *src;
 	u32 vyres = GETVYRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -238,7 +251,16 @@ static void ccw_cursor(struct vc_data *v
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	if (((c&charmask) == 0xff || (c & charmask) == 0xfe)) {
+		char dst[16];
+		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
+		memset(dst, 0, 16);
+		rotate_ccw(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	} else {
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -uprN linux-5.15/drivers/video/fbdev/core/fbcon_cw.c linux-5.15-patched/drivers/video/fbdev/core/fbcon_cw.c
--- linux-5.15/drivers/video/fbdev/core/fbcon_cw.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/fbcon_cw.c	2021-11-09 20:06:38.915383518 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 90 degrees
  */
@@ -91,12 +93,22 @@ static inline void cw_putcs_aligned(stru
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s++) & charmask)*cellsize;
 
+		if (((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe)) {
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_cw(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		} else {
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			cw_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s++;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -213,6 +225,7 @@ static void cw_cursor(struct vc_data *vc
 	int err = 1, dx, dy;
 	char *src;
 	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -221,7 +234,16 @@ static void cw_cursor(struct vc_data *vc
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	if (((c&charmask) == 0xff || (c & charmask) == 0xfe)) {
+		char dst[16];
+		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
+		memset(dst, 0, 16);
+		rotate_cw(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	} else {
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -uprN linux-5.15/drivers/video/fbdev/core/fbcon_ud.c linux-5.15-patched/drivers/video/fbdev/core/fbcon_ud.c
--- linux-5.15/drivers/video/fbdev/core/fbcon_ud.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/drivers/video/fbdev/core/fbcon_ud.c	2021-11-09 20:06:38.916383500 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 180 degrees
  */
@@ -93,12 +95,22 @@ static inline void ud_putcs_aligned(stru
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
 
+		if (((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe)) {
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ud(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		} else {
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -128,12 +140,21 @@ static inline void ud_putcs_unaligned(st
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
-
+		if (((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe)) {
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ud(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		} else {
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
 					image->height, shift_high,
@@ -261,6 +282,7 @@ static void ud_cursor(struct vc_data *vc
 	char *src;
 	u32 vyres = GETVYRES(ops->p->scrollmode, info);
 	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -269,7 +291,16 @@ static void ud_cursor(struct vc_data *vc
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
+	if (((c&charmask) == 0xff || (c & charmask) == 0xfe)) {
+		char dst[16];
+		src = font_bits(vc,(u16*)&c,cellsize,charmask);
+		memset(dst, 0, 16);
+		rotate_ud(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	} else {
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -uprN linux-5.15/include/linux/font.h linux-5.15-patched/include/linux/font.h
--- linux-5.15/include/linux/font.h	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/include/linux/font.h	2021-11-09 20:06:38.992382206 +0900
@@ -35,6 +35,7 @@ struct font_desc {
 #define FONT6x10_IDX	10
 #define TER16x32_IDX	11
 #define FONT6x8_IDX	12
+#define FONT_16x16_CJK_IDX	13
 
 extern const struct font_desc	font_vga_8x8,
 			font_vga_8x16,
@@ -48,7 +49,8 @@ extern const struct font_desc	font_vga_8
 			font_mini_4x6,
 			font_6x10,
 			font_ter_16x32,
-			font_6x8;
+                       font_6x8,
+			font_16x16_cjk;
 
 /* Find a font with a specific name */
 
diff -uprN linux-5.15/lib/fonts/Kconfig linux-5.15-patched/lib/fonts/Kconfig
--- linux-5.15/lib/fonts/Kconfig	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/lib/fonts/Kconfig	2021-11-09 20:06:39.014381832 +0900
@@ -125,8 +125,19 @@ config FONT_6x8
 	help
 	  This font is useful for small displays (OLED).
 
+config FONT_16x16_CJK
+	bool "console 16x16 CJK font ( cover BMP )" if FONTS
+	depends on FRAMEBUFFER_CONSOLE
+	depends on FB
+	depends on VT_CONSOLE
+	select CONSOLE_TRANSLATIONS
+	help
+	  This is a high resolution console font that covers UNICODE bmp,
+	  mostly is CJK font. If you want full UNICODE support on the VT console, say Y.
+
 config FONT_AUTOSELECT
 	def_bool y
+	depends on FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON
 	depends on !FONT_8x8
 	depends on !FONT_6x11
 	depends on !FONT_7x14
@@ -139,6 +150,7 @@ config FONT_AUTOSELECT
 	depends on !FONT_10x18
 	depends on !FONT_TER16x32
 	depends on !FONT_6x8
+	select FONT_16x16_CJK
 	select FONT_8x16
 
 endif # FONT_SUPPORT
diff -uprN linux-5.15/lib/fonts/Makefile linux-5.15-patched/lib/fonts/Makefile
--- linux-5.15/lib/fonts/Makefile	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/lib/fonts/Makefile	2021-11-09 20:06:39.054381151 +0900
@@ -16,6 +16,7 @@ font-objs-$(CONFIG_FONT_MINI_4x6)  += fo
 font-objs-$(CONFIG_FONT_6x10)      += font_6x10.o
 font-objs-$(CONFIG_FONT_TER16x32)  += font_ter16x32.o
 font-objs-$(CONFIG_FONT_6x8)       += font_6x8.o
+font-objs-$(CONFIG_FONT_16x16_CJK) += font_16x16_cjk.o
 
 font-objs += $(font-objs-y)
 
diff -uprN linux-5.15/lib/fonts/font_16x16_cjk.c linux-5.15-patched/lib/fonts/font_16x16_cjk.c
--- linux-5.15/lib/fonts/font_16x16_cjk.c	1970-01-01 09:00:00.000000000 +0900
+++ linux-5.15-patched/lib/fonts/font_16x16_cjk.c	2021-11-09 20:06:39.085380623 +0900
@@ -0,0 +1,27 @@
+/**************************************************************/
+/*                                                            */
+/*       Font file modified from                              */
+/*  http://blog.chinaunix.net/u/13265/showart.php?id=1008020  */
+/*  microcaicai@gmail modifiy it to use in-kernel             */
+/*  font solution                                             */
+/*                                                            */
+/**************************************************************/
+
+#include <linux/font.h>
+
+#define FONTDATAMAX 2093056
+
+static struct font_data fontdata_16x16 = {
+	{ 0, 0, FONTDATAMAX, 0 }, {
+	#include "font_cjk.h"
+}};
+
+const struct font_desc font_16x16_cjk = {
+	.idx	= FONT_16x16_CJK_IDX,
+	.name	= "VGA_CJK",
+	.width	= 8, // have to do this to make curser appear 8dots length
+	.height	= 16,
+	.data	= fontdata_16x16.data,
+	.pref	= 10, // make it big enough to be selected
+	.charcount = 65535,
+};
diff -uprN linux-5.15/lib/fonts/fonts.c linux-5.15-patched/lib/fonts/fonts.c
--- linux-5.15/lib/fonts/fonts.c	2021-11-01 05:53:10.000000000 +0900
+++ linux-5.15-patched/lib/fonts/fonts.c	2021-11-09 20:06:39.115380112 +0900
@@ -60,6 +60,9 @@ static const struct font_desc *fonts[] =
 #ifdef CONFIG_FONT_6x8
 	&font_6x8,
 #endif
+#ifdef CONFIG_FONT_16x16_CJK
+	&font_16x16_cjk,
+#endif
 };
 
 #define num_fonts ARRAY_SIZE(fonts)
