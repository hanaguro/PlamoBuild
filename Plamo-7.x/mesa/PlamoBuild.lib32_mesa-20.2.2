#!/bin/sh
##############################################################
pkgbase="lib32_mesa"
vers="20.2.2"
url="ftp://ftp.freedesktop.org/pub/mesa/mesa-${vers}.tar.xz"
verify=""
digest=""
arch='i686'
build='M1'
src="mesa-${vers}"
#GALLIUM_DRV="i915,nouveau,r600,radeonsi,svga,swrast,virgl"
#DRI_DRIVERS="i965,nouveau"
#OPT_CONFIG="-Dbuildtype=release
#      -Ddri-drivers=$DRI_DRIVERS 
#      -Dgallium-drivers=$GALLIUM_DRV
#      -Dgallium-nine=true
#      -Dglx=dri
#      -Dosmesa=gallium
#      -Dvalgrind=false"               

OPT_CONFIG="
    -Dplatforms=x11,wayland,drm,surfaceless 
    -Ddri-drivers=i915,i965,r100,r200,nouveau
    -Dgallium-drivers=r300,r600,radeonsi,nouveau,virgl,svga,swrast,swr,iris
    -Dvulkan-drivers=amd,intel
    -Dvulkan-overlay-layer=true
    -Dswr-arches=avx,avx2
    -Ddri3=true
    -Degl=true
    -Dgallium-extra-hud=true 
    -Dgallium-nine=true 
    -Dgallium-omx=bellagio 
    -Dgallium-va=true 
    -Dgallium-vdpau=true
    -Dgallium-xa=true 
    -Dgallium-xvmc=false
    -Dgbm=true 
    -Dgles1=false 
    -Dgles2=true 
    -Dglvnd=true 
    -Dglx=dri 
    -Dlibunwind=true
    -Dllvm=true
    -Dlmsensors=true
    -Dosmesa=gallium
    -Dshared-glapi=true
    -Dvalgrind=false
    -Dtools=nir 
    -Dvulkan-device-select-layer=true 
    "
#    -Dgallium-opencl=icd 

DOCS=""
patchfiles="i965-tex-ignore-the-diff-between-GL_TEXTURE_2D-and-GL_TEXTURE_RECTANGLE.patch"
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh
export CC='gcc -m32'
export CXX='g++ -m32'
libdir='lib32'

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi

if [ $opt_config -eq 1 ] ; then
######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    export LD_LIBRARY_PATH=/lib32:/usr/lib32
    meson --prefix=/usr --libdir=/usr/${libdir} ${OPT_CONFIG} $S  
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    export LD_LIBRARY_PATH=/lib32:/usr/lib32
    ninja -j16
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  DESTDIR=$P ninja install
  rm -rf $P/usr/{bin,include,share}

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
