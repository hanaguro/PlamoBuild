#!/bin/sh
##############################################################
pkgbase="qt"
vers="6.7.2"
url="https://download.qt.io/archive/qt/6.7/6.7.2/single/qt-everywhere-src-6.7.2.tar.xz"
verify=""
digest="md5sum:06d35b47349c7c0a45710daad359e07b"
arch=`uname -m`
build=B1
src="qt-everywhere-src-6.7.2"
OPT_CONFIG="-DCMAKE_BUILD_TYPE=Release 
-DCMAKE_INSTALL_PREFIX=/usr 
-DINSTALL_BINDIR=lib/qt6/bin
-DINSTALL_PUBLICBINDIR=usr/bin 
-DINSTALL_LIBEXECDIR=libexec/qt6 
-DINSTALL_DOCDIR=share/doc/qt6 
-DINSTALL_ARCHDATADIR=lib/qt6 
-DINSTALL_DATADIR=share/qt6 
-DINSTALL_INCLUDEDIR=include/qt6 
-DINSTALL_MKSPECSDIR=lib/qt6/mkspecs 
-DINSTALL_EXAMPLESDIR=share/doc/qt6/examples 
-DFEATURE_journald=ON 
-DFEATURE_libproxy=ON 
-DFEATURE_openssl_linked=ON 
-DFEATURE_system_sqlite=ON 
-DFEATURE_system_xcb_xinput=ON 
-DFEATURE_no_direct_extern_access=ON 
-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON 
-DCMAKE_MESSAGE_LOG_LEVEL=STATUS
"
DOCS=".QT-ENTERPRISE-LICENSE-AGREEMENT LICENSES README.md README.md.template qtdoc"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

B=$W/build

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi


if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    cmake -G Ninja -DCMAKE_INSTALL_PREFIX:PATH=/usr ${OPT_CONFIG} $S  
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    ninja -j `nproc`
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  set -e
  DESTDIR=$P ninja install

# Install symlinks for user-facing tools
  cd "$P"

# Ensure 'usr/bin' directory exists
  mkdir -p usr/bin

# Find all 'user_facing_tool_links.txt' files in the '../build' directory
  txts=$(find ../build -name user_facing_tool_links.txt)

# Iterate over each 'user_facing_tool_links.txt' file
  for t in $txts; do
      # Read each line in the 'user_facing_tool_links.txt' file
      while IFS= read -r line; do
          # Extract source and target paths
          src=$(echo $line | cut -d' ' -f1)
          target=$(echo $line | cut -d' ' -f2)
          
          # Create the full target path under 'usr/bin'
          full_target="usr/bin/$(basename $target)"
          
          # Remove existing link if it exists
          if [ -L "$full_target" ] || [ -e "$full_target" ]; then
              rm -f "$full_target"
          fi

          # Create the symbolic link
          ln -s "$src" "$full_target"
        
      done < "$t"
  done

  cd $S/qtbase
  install -d -m755 "$P"/usr/include/qt6xcb-private/{gl_integrations,nativepainting}
  cp -r src/plugins/platforms/xcb/*.h "$P"/usr/include/qt6xcb-private/
  cp -r src/plugins/platforms/xcb/gl_integrations/*.h "$P"/usr/include/qt6xcb-private/gl_integrations/
  cp -r src/plugins/platforms/xcb/nativepainting/*.h "$P"/usr/include/qt6xcb-private/nativepainting/

  set +e

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
