#!/bin/sh
##############################################################
pkgbase="vscode"
vers=""
url="https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
verify=""
digest=""
arch=`uname -m`
build=B1
src="code"
OPT_CONFIG="--disable-static --enable-shared"
DOCS=""
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
#    download_sources
    export LC_ALL=C
    wget_output=$(wget -N --content-disposition "$url" 2>&1)
    wget_exit_code=$?
    detected_filename=""
    filename_saved=$(echo "$wget_output" | grep -oP "(?<=')code_.*\.deb(?=')")

    if [[ -n "$filename_saved" ]]; then
       detected_filename="$filename_saved"
    elif filename_suggested=$(echo "$wget_output" | grep -oP "Server file name specifying '\K[^']+(?=')"); then
       detected_filename="$filename_suggested"
    elif filename_skipped=$(echo "$wget_output" | grep -oP "File ‘\K[^’]+(?=’ not modified)"); then
       detected_filename="$filename_skipped"
    fi

 if [ ! -d $S ];then
    rm -rf $S
    mkdir -p $S
 fi

    if [[ -n "$detected_filename" ]]; then
       cd $S
       ar xv $W/$detected_filename
    else
       echo "Could not reliably determine the filename from wget output."
       exit 1
    fi
    
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  source copy build. patch apply in build dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ;  cp -a $S $B  
    cd $B
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

#    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
#    export LDFLAGS='-Wl,--as-needed' 
#    ./configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man ${OPT_CONFIG}
#    if [ $? != 0 ]; then
#        echo "configure error. $0 script stop"
#        exit 255
#    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    export LDFLAGS='-Wl,--as-needed'
#    make -j3
#    if [ $? != 0 ]; then
#        echo "build error. $0 script stop"
#        exit 255
#    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P

#  export LDFLAGS='-Wl,--as-needed'
#  make install DESTDIR=$P
  cd $P
  vers=$(ls $W/*.deb|awk -F'_' '{ gsub(/-/, "_", $2);print $2 }')
  tar xvf $S/data.tar.xz

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
#  /sbin/makepkg ../$pkg.$compress <<EOF
  /sbin/makepkg ../$pkgbase-$vers-$arch-$build.$compress <<EOF
y
1
EOF

fi
