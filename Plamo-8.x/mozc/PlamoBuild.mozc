#!/bin/sh
##############################################################
pkgbase="mozc"
vers="2.30.5520.102"
#url="https://github.com/google/mozc.git"
url="https://github.com/fcitx/mozc.git"
verify=""
digest=""
arch=`uname -m`
build=B3
src="mozc"
url2="https://github.com/e-kato/macuim.git"
OPT_CONFIG="--disable-static --enable-shared"
DOCS=""
patchfiles="mozc.patch bazel.patch gen_zip_code_seed.patch"
# specifies files that are not in source archive and patchfiles
addfiles="BUILD.bazel"
compress=tzst
#commitid="d2fc9c7d9269cc84b9a4a680cafc382a55e90f42"
commitid="5c09e44fbba173031dd6441343e2c59dd728da98"
##############################################################

source /usr/share/plamobuild_functions.sh

B=$W/build

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources

    set -e

    cd $S
    git submodule update --init --recursive

    cd $W
    if [ ! -d macuim ];then
    	git clone https://github.com/e-kato/macuim.git
    fi
    cd macuim
    git checkout 7beac7ba000e0459a4dc933f3873b521664d2665

    cd $W
    if [ ! -d merge-ut-dictionaries ];then
    	git clone https://github.com/utuhiro78/merge-ut-dictionaries.git
    fi
    cd merge-ut-dictionaries
    git checkout 6c5f28bbeba0aed95d1b56d7d027723cc1ef00cf

    cd $W
    if [ ! -d mozcdic-ut-alt-cannadic ];then
    	git clone https://github.com/utuhiro78/mozcdic-ut-alt-cannadic.git
    fi
    cd mozcdic-ut-alt-cannadic
    git checkout 9e71156adf8cbaf148fe76bc12539f55b461e163

    cd $W
    if [ ! -d mozcdic-ut-edict2 ];then
    	git clone https://github.com/utuhiro78/mozcdic-ut-edict2.git
    fi
    cd mozcdic-ut-edict2
    git checkout 38f7f74726d36b4ece85adadd3739b6177592108

    cd $W
    if [ ! -d mozcdic-ut-jawiki ]; then
    	git clone https://github.com/utuhiro78/mozcdic-ut-jawiki.git
    fi
    cd mozcdic-ut-jawiki
    git checkout afd4a37c1ba1fcd4302043cde73525e84b2c0eec

    cd $W
    if [ ! -d mozcdic-ut-neologd ];then
	    git clone https://github.com/utuhiro78/mozcdic-ut-neologd.git
    fi
    cd mozcdic-ut-neologd
    git checkout 3aa888db141db910e4161598fcd929e49794533d

    cd $W
    if [ ! -d mozcdic-ut-personal-names ];then
    	git clone https://github.com/utuhiro78/mozcdic-ut-personal-names.git
    fi
    cd mozcdic-ut-personal-names
    git checkout e1049584984ac9376685937661ae18c968e25c48

    cd $W
    if [ ! -d mozcdic-ut-place-names ];then
   	git clone https://github.com/utuhiro78/mozcdic-ut-place-names.git
    fi
    cd mozcdic-ut-place-names
    git checkout faaf64ed7b8eac6775be9ad2269aa10d7fb992c3

    cd $W
    if [ ! -d mozcdic-ut-skk-jisyo ];then
   	git clone https://github.com/utuhiro78/mozcdic-ut-skk-jisyo.git
    fi
    cd mozcdic-ut-skk-jisyo
    git checkout e1f26b891ea80f52f846791959fa8e4acf36fa99

    cd $W
    if [ ! -d mozcdic-ut-sudachidict ];then 
	git clone https://github.com/utuhiro78/mozcdic-ut-sudachidict.git
    fi
    cd mozcdic-ut-sudachidict
    git checkout 3ad17aa28c2e817acecbba30040c776fa9619fd4
    
    cd $W
    wget --timestamping https://dumps.wikimedia.org/jawiki/20240701/jawiki-20240701-all-titles-in-ns0.gz

    wget --timestamping https://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip
    wget --timestamping https://www.post.japanpost.jp/zipcode/dl/oogaki/zip/ken_all.zip

    set +e
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

    set -e
    cd $W/merge-ut-dictionaries/src/

    echo "Use our local copy of the Mozc repo"
    sed -i -e "s|https://raw.githubusercontent.com/google/mozc/master/src|file://$S/src|" remove_duplicate_ut_entries.py

    echo "Use a dated snapshot for the JAWiki dump data"
    sed -i -e '/wget/d' count_word_hits.py
    sed -i -e "s|filename = \"jawiki-|filename = \"$W/jawiki-|g" count_word_hits.py
    sed -i -e 's|jawiki-[a-z0-9]\{6,8\}|jawiki-20240701|g' count_word_hits.py apply_word_hits.py

    [[ -e mozcdic-ut.txt ]] && rm mozcdic-ut.txt

    ENABLED_DICTIONARIES=(
    'alt-cannadic'
    'edict2'
    'jawiki'
    'neologd'
    'personal-names'
    'place-names'
    'skk-jisyo'
    'sudachidict'
    )

    for dict in "${ENABLED_DICTIONARIES[@]}"
    do
        tar -xf "$W"/mozcdic-ut-${dict}/mozcdic-ut-${dict}.txt.tar.bz2
        cat mozcdic-ut-${dict}.txt >> mozcdic-ut.txt
    done

    python remove_duplicate_ut_entries.py mozcdic-ut.txt
    python count_word_hits.py
    python apply_word_hits.py mozcdic-ut.txt

######################################################################
#  source copy build. patch apply in build dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ;  cp -a $S $B  
    cd $B/src

    echo "Append the UT dictionary"
    cat $W/merge-ut-dictionaries/src/mozcdic-ut.txt >> $B/src/data/dictionary_oss/dictionary00.txt

    unzip -d $B/src/data/dictionary_oss $W/jigyosyo.zip
    unzip -d $B/src/data/dictionary_oss $W/ken_all.zip
    
    cd $B/src/dictionary
    echo "Generate zip code seed"
    sed -i "s/from dictionary import zip_code_util/import zip_code_util/g" gen_zip_code_seed.py

    cd $B/src/data/dictionary_oss
    echo "Generating zip code seed ..."
    python $B/src/dictionary/gen_zip_code_seed.py --zip_code=KEN_ALL.CSV --jigyosyo=JIGYOSYO.CSV >> dictionary09.txt
    echo "Done."

    cd $B/src
    cp -rf "$W/macuim/Mozc/uim" unix/
    cp $W/BUILD.bazel unix/uim

    cd $B
    patch -p1 -i $W/bazel.patch
    patch -p1 -i $W/gen_zip_code_seed.patch
    cd $B/src
    patch -p1 -i $W/mozc.patch

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

    cd $B/src
    echo "Temp fix for GCC 14"
    sed -i -e '/Werror/d' third_party/protobuf/build_defs/cpp_opts.bzl

    set +e
fi

if [ $opt_build -eq 1 ] ; then
    cd $B/src 

    unset ANDROID_NDK_HOME
    unset ANDROID_HOME
    export JAVA_HOME='/usr/java/jdk-22.0.2'
    export PATH=$JAVA_HOME/bin:$PATH

    set -e
#    bazel build server:mozc_server gui/tool:mozc_tool --config oss_linux --compilation_mode opt
#    bazel build unix/uim:uim-mozc unix/icons --config oss_linux --compilation_mode opt --cxxopt=-Wno-uninitialized --host_cxxopt=-Wno-uninitialized --experimental_cc_shared_library
#    bazel build unix/fcitx5:fcitx5-mozc.so unix/icons --config oss_linux --compilation_mode opt
#    bazel build unix/emacs:mozc_emacs_helper --config oss_linux --compilation_mode opt

    bazel build server:mozc_server gui/tool:mozc_tool unix/fcitx5:fcitx5-mozc.so unix/icons unix/emacs:mozc_emacs_helper --config oss_linux --compilation_mode opt --verbose_failures
    bazel build unix/uim:uim-mozc unix/icons --config oss_linux --compilation_mode opt --cxxopt=-Wno-uninitialized --host_cxxopt=-Wno-uninitialized --experimental_cc_shared_library --verbose_failures
    set +e
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B/src

  # BSD-3-Clause
  sed -n 67,94p data/installer/credits_en.html > Mozc
  install -Dm644 Mozc "$P"/usr/share/licenses/mozc/Mozc
  # BSD-3-Clause
  sed -n 317,344p data/installer/credits_en.html > Breakpad
  install -Dm644 Breakpad "$P"/usr/share/licenses/mozc/Breakpad
  # NAIST-2003
  sed -n 355,424p data/installer/credits_en.html > IPAdic
  install -Dm644 IPAdic "$P"/usr/share/licenses/mozc/IPAdic
  # BSD-2-Clause
  sed -n 435,457p data/installer/credits_en.html > Japanese-Usage-Dictionary
  install -Dm644 Japanese-Usage-Dictionary "$P"/usr/share/licenses/mozc/Japanese-Usage-Dictionary
  # Public Domain Data
  sed -n 468,470p data/installer/credits_en.html > Okinawa-Dictionary
  install -Dm644 Okinawa-Dictionary "$P"/usr/share/licenses/mozc/Okinawa-Dictionary
  # BSD-3-Clause
  sed -n 481,513p data/installer/credits_en.html > Protocol-Buffers
  install -Dm644 Protocol-Buffers "$P"/usr/share/licenses/mozc/Protocol-Buffers
  # MIT
  sed -n 698,704p data/installer/credits_en.html > Tamachi-Phonetic-Kanji-Alphabet
  install -Dm644 Tamachi-Phonetic-Kanji-Alphabet "$P"/usr/share/licenses/mozc/Tamachi-Phonetic-Kanji-Alphabet
  # MIT
  sed -n 762,782p data/installer/credits_en.html > Windows-Implementation-Library
  sed -i -e 's|^[ \t]*||g' Windows-Implementation-Library
  install -Dm644 Windows-Implementation-Library "$P"/usr/share/licenses/mozc/Windows-Implementation-Library

  install -Dm755 bazel-bin/server/mozc_server "$P"/usr/lib/mozc/mozc_server
  install -Dm755 bazel-bin/gui/tool/mozc_tool "$P"/usr/lib/mozc/mozc_tool

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

  cd $B/src
  P2=$W/uim-mozc
  mkdir -p $P2
  install -D -m 755 bazel-bin/unix/uim/libuim-mozc.so "$P2/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "$P2/usr/share/uim"
  install    -m 644 $W/macuim/Mozc/scm/*.scm "$P2/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "$P2/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png "$P2/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "$P2/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "$P2/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"

  mkdir -p $P2/install
  cat <<"EOF" > $P2/install/initpkg
if [ -x /usr/bin/uim-module-manager ]; then
        uim-module-manager --register mozc
fi

if [ -x /usr/bin/gtk-query-immodules-2.0 ]; then
        /usr/bin/gtk-query-immodules-2.0 --update-cache
fi

if [ -x /usr/bin/gtk-query-immodules-3.0 ]; then
        /usr/bin/gtk-query-immodules-3.0 --update-cache
fi
EOF

  cd $P2
  /sbin/makepkg ../uim_mozc-$vers-$arch-$build.$compress <<EOF
y
1
EOF

  cd $B/src
  P3=$W/fcitx-mozc
  mkdir -p $P3

  # BSD-3-Clause
  sed -n 1,29p unix/fcitx5/fcitx_key_translator.h > Fcitx5
  sed -i -e 's|^\/\/[ ]\?||g' Fcitx5
  install -Dm644 Fcitx5 "$P3"/usr/share/licenses/fcitx5-mozc/Fcitx5
  # BSD-3-Clause
  sed -n 67,94p data/installer/credits_en.html > Mozc
  install -Dm644 Mozc "$P3"/usr/share/licenses/fcitx5-mozc/Mozc
  # BSD-3-Clause
  sed -n 317,344p data/installer/credits_en.html > Breakpad
  install -Dm644 Breakpad "$P3"/usr/share/licenses/fcitx5-mozc/Breakpad
  # NAIST-2003
  sed -n 355,424p data/installer/credits_en.html > IPAdic
  install -Dm644 IPAdic "$P3"/usr/share/licenses/fcitx5-mozc/IPAdic
  # BSD-2-Clause
  sed -n 435,457p data/installer/credits_en.html > Japanese-Usage-Dictionary
  install -Dm644 Japanese-Usage-Dictionary "$P3"/usr/share/licenses/fcitx5-mozc/Japanese-Usage-Dictionary
  # Public Domain Data
  sed -n 468,470p data/installer/credits_en.html > Okinawa-Dictionary
  install -Dm644 Okinawa-Dictionary "$P3"/usr/share/licenses/fcitx5-mozc/Okinawa-Dictionary
  # BSD-3-Clause
  sed -n 481,513p data/installer/credits_en.html > Protocol-Buffers
  install -Dm644 Protocol-Buffers "$P3"/usr/share/licenses/fcitx5-mozc/Protocol-Buffers
  # MIT
  sed -n 698,704p data/installer/credits_en.html > Tamachi-Phonetic-Kanji-Alphabet
  install -Dm644 Tamachi-Phonetic-Kanji-Alphabet "$P3"/usr/share/licenses/fcitx5-mozc/Tamachi-Phonetic-Kanji-Alphabet
  # MIT
  sed -n 762,782p data/installer/credits_en.html > Windows-Implementation-Library
  sed -i -e 's|^[ \t]*||g' Windows-Implementation-Library
  install -Dm644 Windows-Implementation-Library "$P3"/usr/share/licenses/fcitx5-mozc/Windows-Implementation-Library

  install -Dm755 bazel-bin/unix/fcitx5/fcitx5-mozc.so "$P3"/usr/lib/fcitx5/fcitx5-mozc.so
  install -Dm644 unix/fcitx5/mozc-addon.conf "$P3"/usr/share/fcitx5/addon/mozc.conf
  install -Dm644 unix/fcitx5/mozc.conf "$P3"/usr/share/fcitx5/inputmethod/mozc.conf

  for pofile in unix/fcitx5/po/*.po
  do
      filename=`basename ${pofile}`
      lang=${filename/.po/}
      mofile=${pofile/.po/.mo}
      msgfmt ${pofile} -o ${mofile}
      install -Dm644 ${mofile} "$P3"/usr/share/locale/${lang}/LC_MESSAGES/fcitx5-mozc.mo
  done

  msgfmt --xml -d unix/fcitx5/po/ --template unix/fcitx5/org.fcitx.Fcitx5.Addon.Mozc.metainfo.xml.in -o unix/fcitx5/org.fcitx.Fcitx5.Addon.Mozc.metainfo.xml
  install -Dm644 unix/fcitx5/org.fcitx.Fcitx5.Addon.Mozc.metainfo.xml "$P3"/usr/share/metainfo/org.fcitx.Fcitx5.Addon.Mozc.metainfo.xml

  cd bazel-bin/unix

  unzip -o icons.zip

  install -Dm644 mozc.png                                     "$P3"/usr/share/icons/hicolor/128x128/apps/org.fcitx.Fcitx5.fcitx_mozc.png
  install -Dm644 alpha_full.svg                               "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_alpha_full.svg
  install -Dm644 alpha_half.svg                               "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_alpha_half.svg
  install -Dm644 direct.svg                                   "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_direct.svg
  install -Dm644 hiragana.svg                                 "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_hiragana.svg
  install -Dm644 katakana_full.svg                            "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_katakana_full.svg
  install -Dm644 katakana_half.svg                            "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_katakana_half.svg
  install -Dm644 outlined/dictionary.svg                      "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_dictionary.svg
  install -Dm644 outlined/properties.svg                      "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_properties.svg
  install -Dm644 outlined/tool.svg                            "$P3"/usr/share/icons/hicolor/scalable/apps/org.fcitx.Fcitx5.fcitx_mozc_tool.svg

  ln -s org.fcitx.Fcitx5.fcitx_mozc.png                       "$P3"/usr/share/icons/hicolor/128x128/apps/fcitx_mozc.png
  ln -s org.fcitx.Fcitx5.fcitx_mozc_alpha_full.svg            "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_alpha_full.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_alpha_half.svg            "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_alpha_half.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_direct.svg                "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_direct.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_hiragana.svg              "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_hiragana.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_katakana_full.svg         "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_katakana_full.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_katakana_half.svg         "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_katakana_half.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_dictionary.svg            "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_dictionary.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_properties.svg            "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_properties.svg
  ln -s org.fcitx.Fcitx5.fcitx_mozc_tool.svg                  "$P3"/usr/share/icons/hicolor/scalable/apps/fcitx_mozc_tool.svg

  cd $P3
  /sbin/makepkg ../fcitx5_mozc-$vers-$arch-$build.$compress <<EOF
y
1
EOF
 
  cd $B/src
  P4=$W/emacs-mozc
  mkdir -p $P4

  # BSD-3-Clause
  sed -n 67,94p data/installer/credits_en.html > Mozc
  install -Dm644 Mozc "$P4"/usr/share/licenses/emacs-mozc/Mozc
  # BSD-3-Clause
  sed -n 317,344p data/installer/credits_en.html > Breakpad
  install -Dm644 Breakpad "$P4"/usr/share/licenses/emacs-mozc/Breakpad
  # NAIST-2003
  sed -n 355,424p data/installer/credits_en.html > IPAdic
  install -Dm644 IPAdic "$P4"/usr/share/licenses/emacs-mozc/IPAdic
  # BSD-2-Clause
  sed -n 435,457p data/installer/credits_en.html > Japanese-Usage-Dictionary
  install -Dm644 Japanese-Usage-Dictionary "$P4"/usr/share/licenses/emacs-mozc/Japanese-Usage-Dictionary
  # Public Domain Data
  sed -n 468,470p data/installer/credits_en.html > Okinawa-Dictionary
  install -Dm644 Okinawa-Dictionary "$P4"/usr/share/licenses/emacs-mozc/Okinawa-Dictionary
  # BSD-3-Clause
  sed -n 481,513p data/installer/credits_en.html > Protocol-Buffers
  install -Dm644 Protocol-Buffers "$P4"/usr/share/licenses/emacs-mozc/Protocol-Buffers
  # MIT
  sed -n 698,704p data/installer/credits_en.html > Tamachi-Phonetic-Kanji-Alphabet
  install -Dm644 Tamachi-Phonetic-Kanji-Alphabet "$P4"/usr/share/licenses/emacs-mozc/Tamachi-Phonetic-Kanji-Alphabet
  # MIT
  sed -n 762,782p data/installer/credits_en.html > Windows-Implementation-Library
  sed -i -e 's|^[ \t]*||g' Windows-Implementation-Library
  install -Dm644 Windows-Implementation-Library "$P4"/usr/share/licenses/emacs-mozc/Windows-Implementation-Library

  install -Dm755 bazel-bin/unix/emacs/mozc_emacs_helper "$P4"/usr/bin/mozc_emacs_helper
  install -Dm644 unix/emacs/mozc.el "$P4"/usr/share/emacs/site-lisp/mozc.el
   cd $P4
  /sbin/makepkg ../emacs_mozc-$vers-$arch-$build.$compress <<EOF
y
1
EOF
 
fi
