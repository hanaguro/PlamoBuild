#!/bin/sh
##############################################################
pkgbase="gdc"
vers="14.1.0"
url="ftp://ftp.gnu.org/gnu/gcc/gcc-${vers}/gcc-${vers}.tar.gz"
verify=""
digest=""
arch=`uname -m`
build=B1
src="gcc-${vers}"
OPT_CONFIG="
--with-bugurl=https://gcc.gnu.org/bugzilla/
--with-system-zlib
--enable-languages=d
--enable-static
--enable-threads=posix
--with-isl
--enable-__cxa_atexit
--disable-libunwind-exceptions
--enable-clocale=gnu
--disable-libstdcxx-pch
--disable-libssp
--enable-gnu-unique-object
--enable-linker-build-id
--enable-lto
--enable-plugin
--enable-install-libiberty
--with-linker-hash-style=gnu
--enable-gnu-indirect-function
--disable-multilib
--disable-werror
--disable-bootstrap
--enable-checking=release
--enable-default-pie
--enable-default-ssp
--enable-cet=auto
--with-target-system-zlib=yes
"
DOCS="ABOUT-NLS COPYING COPYING.LIB COPYING.RUNTIME COPYING3 COPYING3.LIB ChangeLog ChangeLog.jit ChangeLog.tree-ssa INSTALL MAINTAINERS NEWS README SECURITY.txt"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh
B=$W/build

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi


if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    $S/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man ${OPT_CONFIG}
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    export LDFLAGS='-Wl,--as-needed'
    make -j3
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  install -Dm 755 $B/gcc/gdc $P/usr/bin/gdc
  install -Dm 755 $B/gcc/d21 $P/usr/lib/gcc/x86_64-pc-linux-gnu/${vers}/d21

  make -C lto-plugin DESTDIR=$P install
  make -C x86_64-pc-linux-gnu/libgcc DESTDIR=$P install

  cd $B
  make -C x86_64-pc-linux-gnu/libphobos DESTDIR=$P install

  mkdir -p -m 755 $P/usr/include/dlang

  ln -s /usr/lib/gcc/x86_64-pc-linux-gnu/${vers}/include/d $P/usr/include/dlang/gdc

  if [ -d $P/usr/lib64 ]; then
    mv $P/usr/lib64/* $P/usr/lib
    rmdir $P/usr/lib64
  fi

  rm -f $P/usr/lib/libgcc_s.so*

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
