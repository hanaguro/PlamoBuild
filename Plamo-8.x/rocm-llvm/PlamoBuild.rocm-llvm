#!/bin/sh
##############################################################
pkgbase="rocm_llvm"
vers="6.2.0"
url="https://github.com/ROCm/llvm-project.git"
verify=""
digest=""
arch=`uname -m`
build=B1
src="llvm-project/llvm"
OPT_CONFIG="-DCMAKE_BUILD_TYPE=Release
-DCMAKE_INSTALL_PREFIX='/opt/rocm/lib/llvm'
-DLLVM_ENABLE_PROJECTS='llvm;clang;lld;compiler-rt;clang-tools-extra'
-DCLANG_ENABLE_AMDCLANG=ON
-DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind'
-DLIBCXX_ENABLE_STATIC=ON
-DLIBCXXABI_ENABLE_STATIC=ON
-DLLVM_TARGETS_TO_BUILD='AMDGPU;NVPTX;X86'
-DCLANG_DEFAULT_LINKER=lld
-DLLVM_INSTALL_UTILS=ON
-DLLVM_ENABLE_BINDINGS=OFF
-DLLVM_LINK_LLVM_DYLIB=OFF
-DLLVM_BUILD_LLVM_DYLIB=OFF
-DLLVM_ENABLE_ASSERTIONS=ON
-DOCAMLFIND=NO
-DLLVM_ENABLE_OCAMLDOC=OFF
-DLLVM_INCLUDE_BENCHMARKS=OFF
-DLLVM_BUILD_TESTS=OFF
-DLLVM_INCLUDE_TESTS=OFF
-DCLANG_INCLUDE_TESTS=OFF
-DLLVM_BINUTILS_INCDIR=/usr/include
"
OPT_CONFIG_DEVICE_LIBS="-DCMAKE_BUILD_TYPE=Release
-DCMAKE_BUILD_TYPE=None
-DCMAKE_INSTALL_PREFIX=/opt/rocm
"
OPT_CONFIG_COMGR="-DCMAKE_BUILD_TYPE=Release
-DCMAKE_BUILD_TYPE=None
-DCMAKE_INSTALL_PREFIX=/opt/rocm
-DBUILD_TESTING=OFF
"
OPT_CONFIG_HIPCC="-DCMAKE_BUILD_TYPE=Release
-DCMAKE_INSTALL_PREFIX=/opt/rocm
"

DOCS="LICENSE.TXT README.md revert_patches.txt"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
commitid="rocm-${vers}"
##############################################################

source /usr/share/plamobuild_functions.sh
B=$W/build
B2=$W/build-device-libs
B3=$W/build-comgr
B4=$W/build-hipcc

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi


if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    cd $B

    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    cmake -G Ninja ${OPT_CONFIG} $S  
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    ninja -j$(nproc)
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi

    if [ -d $B2 ] ; then rm -rf $B2 ; fi ; mkdir -p $B2 
    cd $B2
    cmake -G Ninja ${OPT_CONFIG_DEVICE_LIBS} -D CMAKE_PREFIX_PATH="$B" $S/../amd/device-libs
    if [ $? != 0 ]; then
        echo "configure error. rocm_device_libs$0 script stop"
        exit 255
    fi
    ninja -j$(nproc)
    if [ $? != 0 ]; then
        echo "build error. rocm_device_libs script stop"
        exit 255
    fi

    if [ -d $B3 ] ; then rm -rf $B3 ; fi ; mkdir -p $B3 
    cd $B3
    cmake -G Ninja ${OPT_CONFIG_COMGR} -D CMAKE_PREFIX_PATH="$B;$B2"  -DCMAKE_CXX_FLAGS="--rocm-device-lib-path=/opt/rocm/lib" -DCMAKE_C_FLAGS="--rocm-device-lib-path=/opt/rocm/lib" -DCMAKE_C_COMPILER=$B/bin/clang -DCMAKE_CXX_COMPILER=$B/bin/clang++ $S/../amd/comgr
    if [ $? != 0 ]; then
        echo "configure error. rocm_comgr script stop"
        exit 255
    fi
    ninja -j$(nproc)
    if [ $? != 0 ]; then
        echo "build error. rocm_comgr script stop"
        exit 255
    fi

    if [ -d $B4 ] ; then rm -rf $B4 ; fi ; mkdir -p $B4 
    cd $B4
    cmake -G Ninja ${OPT_CONFIG_HIPCC} $S/../amd/hipcc
    if [ $? != 0 ]; then
        echo "configure error. rocm_hipcc script stop"
        exit 255
    fi
    ninja -j$(nproc)
    if [ $? != 0 ]; then
        echo "build error. rocm_hipcc script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  DESTDIR=$P ninja install

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B2
  DESTDIR=$P ninja install
  install_tweak
  convert_links
  cd $P
  /sbin/makepkg ../rocm_device_libs-$vers-$arch-$build.$compress <<EOF
y
1
EOF

  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B3
  DESTDIR=$P ninja install
  install_tweak
  convert_links
  cd $P
  /sbin/makepkg ../rocm_comgr-$vers-$arch-$build.$compress <<EOF
y
1
EOF

  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B4
  DESTDIR=$P ninja install
  install_tweak
  convert_links
  cd $P
  /sbin/makepkg ../rocm_hipcc-$vers-$arch-$build.$compress <<EOF
y
1
EOF


fi
